\import Algebra.Meta
\import Meta
\import Paths.Meta
\import Test ()
\import TestDir.Test2 ()
\import Utils
\import lect03
\open Nat(+,*)

-- 1. Чему равно fileTest (в нормальной форме)? Докажите это.

\func fileTest_eq : fileTest = (foobar, 8, 13, 55, 18, 21) => idp

-- 2. Чему равно M5.t''' (в нормальной форме)? Докажите это.

\func M5t_eq : M5.t''' = ((82, 42, 61, 82, 34, 42, 61, 29), 25,(42,29)) => idp

-- 3. Докажите ассоциативность ++.

\func ++-assoc {A : \Type} (xs ys zs : List A) : (xs ++ ys) ++ zs = xs ++ (ys ++ zs) \elim xs
  | nil => idp
  | :: a xs => pmap (a ::) (++-assoc _ _ _)


-- 4. Докажите, что reverse (reverse xs) = xs, где reverse определен через ++.

\func reverse {A : \Type} (xs : List A) : List A
  | nil => nil
  | :: x xs => reverse xs ++ (x :: nil)

\func rev0 {A : \Type} (xs : List A) : xs = xs ++ nil  \elim xs
  | nil => idp
  | :: x xs => cong (rev0 _)

-- Это утверждение будет полезно для доказательства.
\func reverse++ {A : \Type} (xs ys : List A) : reverse (xs ++ ys) = reverse ys ++ reverse xs \elim xs
  | nil => rev0 _
  | :: a xs => cong (reverse++ _ _) *> ++-assoc _ _ _

\func reverse-isInvolutive {A : \Type} (xs : List A) : reverse (reverse xs) = xs \elim xs
  | nil => idp
  | :: a xs => reverse++ _ _ *> cong (reverse-isInvolutive _)

-- 5. Докажите дистрибутивность умножения над сложением для натуральных чисел (выберите 1 из двух вариантов).

\func mul0 {n : Nat} : 0 * n = 0 \elim n
  | 0 => idp
  | suc n => mul0

\func mulsuc {n m : Nat} : suc n * m = n * m + m \elim m
  | 0 => idp
  | suc m => pmap suc (pmap (`+ n) mulsuc *> +-assoc _ _ _ *> pmap (n * m +) (+-comm _ _) *> sym (+-assoc _ _ _))

\func mulC {n m : Nat} : n * m = m * n \elim n
  | 0 => mul0
  | suc n => mulsuc *> pmap (`+ m) mulC

\func rdistr (n m k : Nat) : (m + k) * n = m * n + k * n =>
  mulC *> ldistr _ _ _ *> pmap (n * m +) mulC *> pmap (`+ k * n) mulC

\func ldistr (n m k : Nat) : n * (m + k) = n * m + n * k \elim k
  | 0 => idp
  | suc n' => cong (ldistr _ _ _) *> +-assoc _ _ _
